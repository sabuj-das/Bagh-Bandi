/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.sf.bagh.bandhi.app;

import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.beans.PropertyChangeListener;
import java.util.Random;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;

import net.sf.bagh.bandhi.BaghBandhiKhela;
import net.sf.bagh.bandhi.DifficultyLevelEnum;
import net.sf.bagh.bandhi.Game;
import net.sf.bagh.bandhi.GamePlayManager;
import net.sf.bagh.bandhi.GameStatusEnum;
import net.sf.bagh.bandhi.app.board.BoardBasePanel;
import net.sf.bagh.bandhi.app.board.UIBoard;
import net.sf.bagh.bandhi.app.board.UIGoat;
import net.sf.bagh.bandhi.app.board.UITiger;
import net.sf.bagh.bandhi.app.event.GameStatusChangeEvent;
import net.sf.bagh.bandhi.app.event.GameStatusChangeEventManager;
import net.sf.bagh.bandhi.app.event.GameStatusChangeListener;
import net.sf.bagh.bandhi.app.event.RedoMoveEvent;
import net.sf.bagh.bandhi.app.event.RedoMoveEventListener;
import net.sf.bagh.bandhi.app.event.RedoMoveEventManager;
import net.sf.bagh.bandhi.app.event.UndoMoveEvent;
import net.sf.bagh.bandhi.app.event.UndoMoveEventListener;
import net.sf.bagh.bandhi.app.event.UndoMoveEventManager;
import net.sf.bagh.bandhi.app.event.UndoableMoveEvent;
import net.sf.bagh.bandhi.app.event.UndoableMoveEventManager;
import net.sf.bagh.bandhi.app.event.UndoableMoveListener;
import net.sf.bagh.bandhi.app.undo.MoveUndoManager;
import net.sf.bagh.bandhi.app.util.WindowUtil;
import net.sf.bagh.bandhi.core.GameEngine;
import net.sf.bagh.bandhi.core.model.Animal;
import net.sf.bagh.bandhi.core.model.Animal.AnimalType;
import net.sf.bagh.bandhi.core.model.Goat;
import net.sf.bagh.bandhi.core.model.PathOfMove;
import net.sf.bagh.bandhi.core.model.Tiger;

import org.apache.log4j.Logger;

/**
 *
 * @author sabuj
 */
public class GameFrame extends javax.swing.JFrame implements PropertyChangeListener, 
	GameStatusChangeListener, UndoMoveEventListener, RedoMoveEventListener,
	UndoableEditListener, UndoableMoveListener
{
	private static Logger logger = Logger.getLogger(GameFrame.class);
    private static final GameEngine gameEngine = GameEngine.getEngine();
    private static final GamePlayManager gamePlayManager = GamePlayManager.getInstance();
    
    private static GameStatusChangeEventManager statusChangeEventManager = GameStatusChangeEventManager.getInstance();
    private static UndoMoveEventManager undoMoveEventManager = UndoMoveEventManager.getInstance();
    private static RedoMoveEventManager redoMoveEventManager = RedoMoveEventManager.getInstance();
    private static UndoableMoveEventManager undoableMoveEventManager = UndoableMoveEventManager.getInstance();
    
    private BoardBasePanel boardBasePanel;
    private JScrollPane boardScrollPane;
    private UIBoard gameBoard;
    
    /**
     * Creates new form GameFrame
     */
    public GameFrame() {
        
    	initComponents();
        setIconImage((new ImageIcon(getClass()
                .getResource("/images/game-chip-24x24.png"))).getImage());
        addPropertyChangeListener(this);
        
        statusChangeEventManager.addGameStatusChangeListener(this);
        undoMoveEventManager.addUndoMoveEventListener(this);
        redoMoveEventManager.addRedoMoveEventListener(this);
        
        boardScrollPane = new JScrollPane();
        WindowUtil.bringToCenter(this);
        Graphics g = getGraphics();
        if(null != g){
        	RenderingHints hints = new RenderingHints(
    				RenderingHints.KEY_ANTIALIASING,
    				RenderingHints.VALUE_ANTIALIAS_ON);
    		hints.add(new RenderingHints(RenderingHints.KEY_RENDERING,
    				RenderingHints.VALUE_RENDER_QUALITY));

    		Graphics2D g2d = (Graphics2D) g;
    		g2d.setRenderingHints(hints);
    		update(g2d);
        }
        if(logger.isDebugEnabled()){
        	logger.debug("Frame initialization complete");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startingAnimalButtonGroup = new javax.swing.ButtonGroup();
        tigerPlayedByButtonGroup = new javax.swing.ButtonGroup();
        goatPlayedByButtonGroup = new javax.swing.ButtonGroup();
        boardSizeButtonGroup = new javax.swing.ButtonGroup();
        gameDifficultyButtonGroup = new javax.swing.ButtonGroup();
        gameControlToolBar = new javax.swing.JToolBar();
        newGameButton = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        loadGameButton = new javax.swing.JButton();
        saveGameButton = new javax.swing.JButton();
        endGameButton = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        undoButton = new javax.swing.JButton();
        redoButton = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        hintButton = new javax.swing.JButton();
        jSeparator12 = new javax.swing.JToolBar.Separator();
        jLabel1 = new javax.swing.JLabel();
        boardSizeSlider = new javax.swing.JSlider();
        selectedBoardSizeLabel = new javax.swing.JLabel();
        jSeparator15 = new javax.swing.JToolBar.Separator();
        evaluteCurrentGameButton = new javax.swing.JButton();
        contentPanel = new javax.swing.JPanel();
        statisticPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        blockedTigerCountLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        killedGoatsCountLabel = new javax.swing.JLabel();
        jSeparator13 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        movementTextArea = new javax.swing.JTextArea();
        boardContainerPanel = new javax.swing.JPanel();
        playerInfoPanel = new javax.swing.JPanel();
        currentPlayerLabel = new javax.swing.JLabel();
        gameMenuBar = new javax.swing.JMenuBar();
        gameMenu = new javax.swing.JMenu();
        newGameMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        loadGameMenuItem = new javax.swing.JMenuItem();
        saveGameMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        evaluteCurrentGameMenuItem = new javax.swing.JMenuItem();
        endGameMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        undoMenuItem = new javax.swing.JMenuItem();
        redoMenuItem = new javax.swing.JMenuItem();
        jSeparator11 = new javax.swing.JPopupMenu.Separator();
        preferenceMenuItem = new javax.swing.JMenuItem();
        settingsMenu = new javax.swing.JMenu();
        showToolbarCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        difficultyMenu = new javax.swing.JMenu();
        lowDifficultyRadioMenuItem = new javax.swing.JRadioButtonMenuItem();
        moderateDifficultyRadioMenuItem = new javax.swing.JRadioButtonMenuItem();
        highDifficultyRadioMenuItem = new javax.swing.JRadioButtonMenuItem();
        jSeparator14 = new javax.swing.JPopupMenu.Separator();
        startingAnimalMenu = new javax.swing.JMenu();
        autoSelectStartPlayerRbMenuItem = new javax.swing.JRadioButtonMenuItem();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        startByTigerMenuItem = new javax.swing.JRadioButtonMenuItem();
        startByGoatMenuItem = new javax.swing.JRadioButtonMenuItem();
        tigerPlayerMenu = new javax.swing.JMenu();
        tigerByMouseMenuItem = new javax.swing.JRadioButtonMenuItem();
        tigerByAutoMenuItem = new javax.swing.JRadioButtonMenuItem();
        goatPlayerMenu = new javax.swing.JMenu();
        goatByMouseMenuItem = new javax.swing.JRadioButtonMenuItem();
        goatByAutoMenuItem = new javax.swing.JRadioButtonMenuItem();
        boardSizeMenu = new javax.swing.JMenu();
        normalBoardRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        bigBoardRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        changePlayerNamesMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        showHintMenuItem = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        aboutMenuItem = new javax.swing.JMenuItem();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Surround the Tiger (Bagh Bandhi Khela)");
        setMinimumSize(new java.awt.Dimension(680, 520));
        setPreferredSize(new java.awt.Dimension(680, 520));

        gameControlToolBar.setFloatable(false);
        gameControlToolBar.setRollover(true);

        newGameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new_game.gif"))); // NOI18N
        newGameButton.setText("New");
        newGameButton.setToolTipText("New Game");
        newGameButton.setFocusable(false);
        newGameButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        newGameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newGameButton.addActionListener(formListener);
        gameControlToolBar.add(newGameButton);
        gameControlToolBar.add(jSeparator7);

        loadGameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/load_game.png"))); // NOI18N
        loadGameButton.setText("Load");
        loadGameButton.setToolTipText("Load Game");
        loadGameButton.setFocusable(false);
        loadGameButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        loadGameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadGameButton.addActionListener(formListener);
        gameControlToolBar.add(loadGameButton);

        saveGameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save_edit.gif"))); // NOI18N
        saveGameButton.setText("Save");
        saveGameButton.setToolTipText("Save Game");
        saveGameButton.setEnabled(false);
        saveGameButton.setFocusable(false);
        saveGameButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        saveGameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveGameButton.addActionListener(formListener);
        gameControlToolBar.add(saveGameButton);

        endGameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/end_game.png"))); // NOI18N
        endGameButton.setText("End");
        endGameButton.setToolTipText("End Game");
        endGameButton.setEnabled(false);
        endGameButton.setFocusable(false);
        endGameButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        endGameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        endGameButton.addActionListener(formListener);
        gameControlToolBar.add(endGameButton);
        gameControlToolBar.add(jSeparator5);

        undoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/undo.png"))); // NOI18N
        undoButton.setText("Undo");
        undoButton.setEnabled(false);
        undoButton.setFocusable(false);
        undoButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        undoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        undoButton.addActionListener(formListener);
        gameControlToolBar.add(undoButton);

        redoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/redo.png"))); // NOI18N
        redoButton.setText("Redo");
        redoButton.setEnabled(false);
        redoButton.setFocusable(false);
        redoButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        redoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        redoButton.addActionListener(formListener);
        gameControlToolBar.add(redoButton);
        gameControlToolBar.add(jSeparator6);

        hintButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/hint_bulb.png"))); // NOI18N
        hintButton.setText("Hint");
        hintButton.setToolTipText("Show Hint");
        hintButton.setEnabled(false);
        hintButton.setFocusable(false);
        hintButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        hintButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        hintButton.addActionListener(formListener);
        gameControlToolBar.add(hintButton);
        gameControlToolBar.add(jSeparator12);

        jLabel1.setText("Board Size");
        gameControlToolBar.add(jLabel1);

        boardSizeSlider.setMaximum(5);
        boardSizeSlider.setMinimum(1);
        boardSizeSlider.setPaintLabels(true);
        boardSizeSlider.setSnapToTicks(true);
        boardSizeSlider.setToolTipText("Board Size");
        boardSizeSlider.setValue(3);
        boardSizeSlider.setEnabled(false);
        boardSizeSlider.setMaximumSize(new java.awt.Dimension(200, 25));
        boardSizeSlider.setMinimumSize(new java.awt.Dimension(200, 25));
        boardSizeSlider.addChangeListener(formListener);
        gameControlToolBar.add(boardSizeSlider);

        selectedBoardSizeLabel.setForeground(new java.awt.Color(0, 0, 204));
        selectedBoardSizeLabel.setText("NORMAL");
        gameControlToolBar.add(selectedBoardSizeLabel);
        gameControlToolBar.add(jSeparator15);

        evaluteCurrentGameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/evalute-16x16.png"))); // NOI18N
        evaluteCurrentGameButton.setText("Evalute");
        evaluteCurrentGameButton.setEnabled(false);
        evaluteCurrentGameButton.setFocusable(false);
        evaluteCurrentGameButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        evaluteCurrentGameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        evaluteCurrentGameButton.addActionListener(formListener);
        gameControlToolBar.add(evaluteCurrentGameButton);

        getContentPane().add(gameControlToolBar, java.awt.BorderLayout.PAGE_START);

        contentPanel.setBackground(new java.awt.Color(0, 0, 0));

        statisticPanel.setBackground(new java.awt.Color(0, 0, 0));
        statisticPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(" Game Statictic "));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 51));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/circle-red-24x24.png"))); // NOI18N
        jLabel2.setText("Tigers Blocked");

        blockedTigerCountLabel.setFont(new Font(BaghBandhiKhela.bitstreamFont.getFontName(), java.awt.Font.BOLD, 23));
        blockedTigerCountLabel.setForeground(new java.awt.Color(0, 153, 0));
        blockedTigerCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        blockedTigerCountLabel.setText("0");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 51));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/circle-blue-24x24.png"))); // NOI18N
        jLabel4.setText("Goats Killed");

        killedGoatsCountLabel.setFont(new Font(BaghBandhiKhela.bitstreamFont.getFontName(), java.awt.Font.BOLD, 23));
        killedGoatsCountLabel.setForeground(new java.awt.Color(0, 153, 51));
        killedGoatsCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        killedGoatsCountLabel.setText("0");

        jLabel3.setText("Movement:");

        movementTextArea.setEditable(false);
        movementTextArea.setBackground(new java.awt.Color(102, 102, 102));
        movementTextArea.setColumns(20);
        movementTextArea.setFont(new Font(BaghBandhiKhela.bitstreamFont.getFontName(), java.awt.Font.PLAIN, 11));
        movementTextArea.setForeground(new java.awt.Color(255, 255, 204));
        movementTextArea.setRows(5);
        movementTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(movementTextArea);

        javax.swing.GroupLayout statisticPanelLayout = new javax.swing.GroupLayout(statisticPanel);
        statisticPanel.setLayout(statisticPanelLayout);
        statisticPanelLayout.setHorizontalGroup(
            statisticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statisticPanelLayout.createSequentialGroup()
                .addGroup(statisticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(statisticPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(statisticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(blockedTigerCountLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(killedGoatsCountLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, statisticPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
            .addComponent(jSeparator13)
        );
        statisticPanelLayout.setVerticalGroup(
            statisticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statisticPanelLayout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blockedTigerCountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(killedGoatsCountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator13, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                .addContainerGap())
        );

        boardContainerPanel.setBackground(new java.awt.Color(0, 0, 0));

        playerInfoPanel.setBackground(new java.awt.Color(0, 0, 0));
        playerInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("  Current Player  "));

        currentPlayerLabel.setFont(new Font(BaghBandhiKhela.bitstreamFont.getFontName(), java.awt.Font.BOLD, 23));
        currentPlayerLabel.setForeground(new java.awt.Color(0, 153, 51));
        playerInfoPanel.add(currentPlayerLabel);

        javax.swing.GroupLayout contentPanelLayout = new javax.swing.GroupLayout(contentPanel);
        contentPanel.setLayout(contentPanelLayout);
        contentPanelLayout.setHorizontalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addComponent(boardContainerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statisticPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playerInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        contentPanelLayout.setVerticalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(boardContainerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addComponent(playerInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statisticPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(contentPanel, java.awt.BorderLayout.CENTER);

        gameMenu.setText("Game");
        gameMenu.addActionListener(formListener);

        newGameMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newGameMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new_game.gif"))); // NOI18N
        newGameMenuItem.setText("New");
        newGameMenuItem.addActionListener(formListener);
        gameMenu.add(newGameMenuItem);
        gameMenu.add(jSeparator1);

        loadGameMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        loadGameMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/load_game.png"))); // NOI18N
        loadGameMenuItem.setText("Load");
        loadGameMenuItem.addActionListener(formListener);
        gameMenu.add(loadGameMenuItem);

        saveGameMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveGameMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save_edit.gif"))); // NOI18N
        saveGameMenuItem.setText("Save");
        saveGameMenuItem.setEnabled(false);
        saveGameMenuItem.addActionListener(formListener);
        gameMenu.add(saveGameMenuItem);
        gameMenu.add(jSeparator2);

        evaluteCurrentGameMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        evaluteCurrentGameMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/evalute-16x16.png"))); // NOI18N
        evaluteCurrentGameMenuItem.setText("Evalute Current Game");
        evaluteCurrentGameMenuItem.setEnabled(false);
        gameMenu.add(evaluteCurrentGameMenuItem);

        endGameMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        endGameMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/end_game.png"))); // NOI18N
        endGameMenuItem.setText("End Game");
        endGameMenuItem.setEnabled(false);
        endGameMenuItem.addActionListener(formListener);
        gameMenu.add(endGameMenuItem);
        gameMenu.add(jSeparator3);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/hide.png"))); // NOI18N
        jMenuItem1.setText("Minimize to Tray ...");
        jMenuItem1.addActionListener(formListener);
        gameMenu.add(jMenuItem1);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit.png"))); // NOI18N
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(formListener);
        gameMenu.add(exitMenuItem);

        gameMenuBar.add(gameMenu);

        editMenu.setText("Edit");

        undoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/undo.png"))); // NOI18N
        undoMenuItem.setText("Undo");
        undoMenuItem.setEnabled(false);
        undoMenuItem.addActionListener(formListener);
        editMenu.add(undoMenuItem);

        redoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/redo.png"))); // NOI18N
        redoMenuItem.setText("Redo");
        redoMenuItem.setEnabled(false);
        redoMenuItem.addActionListener(formListener);
        editMenu.add(redoMenuItem);
        editMenu.add(jSeparator11);

        preferenceMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/settings.png"))); // NOI18N
        preferenceMenuItem.setText("Preference");
        preferenceMenuItem.addActionListener(formListener);
        editMenu.add(preferenceMenuItem);

        gameMenuBar.add(editMenu);

        settingsMenu.setText("Settings");

        showToolbarCheckBoxMenuItem.setSelected(true);
        showToolbarCheckBoxMenuItem.setText("Show Toolbar");
        showToolbarCheckBoxMenuItem.addActionListener(formListener);
        settingsMenu.add(showToolbarCheckBoxMenuItem);
        settingsMenu.add(jSeparator9);

        difficultyMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/games-difficult-16x16.png"))); // NOI18N
        difficultyMenu.setText("Game Difficulty");

        gameDifficultyButtonGroup.add(lowDifficultyRadioMenuItem);
        lowDifficultyRadioMenuItem.setSelected(true);
        lowDifficultyRadioMenuItem.setText("Low");
        lowDifficultyRadioMenuItem.addActionListener(formListener);
        difficultyMenu.add(lowDifficultyRadioMenuItem);

        gameDifficultyButtonGroup.add(moderateDifficultyRadioMenuItem);
        moderateDifficultyRadioMenuItem.setText("Moderate");
        moderateDifficultyRadioMenuItem.addActionListener(formListener);
        difficultyMenu.add(moderateDifficultyRadioMenuItem);

        gameDifficultyButtonGroup.add(highDifficultyRadioMenuItem);
        highDifficultyRadioMenuItem.setText("High");
        highDifficultyRadioMenuItem.addActionListener(formListener);
        difficultyMenu.add(highDifficultyRadioMenuItem);

        settingsMenu.add(difficultyMenu);
        settingsMenu.add(jSeparator14);

        startingAnimalMenu.setText("Starting Animal");

        startingAnimalButtonGroup.add(autoSelectStartPlayerRbMenuItem);
        autoSelectStartPlayerRbMenuItem.setText("Auto Select (Random)");
        autoSelectStartPlayerRbMenuItem.addActionListener(formListener);
        startingAnimalMenu.add(autoSelectStartPlayerRbMenuItem);
        startingAnimalMenu.add(jSeparator10);

        startingAnimalButtonGroup.add(startByTigerMenuItem);
        startByTigerMenuItem.setSelected(true);
        startByTigerMenuItem.setText("Tiger");
        startByTigerMenuItem.addActionListener(formListener);
        startingAnimalMenu.add(startByTigerMenuItem);

        startingAnimalButtonGroup.add(startByGoatMenuItem);
        startByGoatMenuItem.setText("Goat");
        startByGoatMenuItem.addActionListener(formListener);
        startingAnimalMenu.add(startByGoatMenuItem);

        settingsMenu.add(startingAnimalMenu);

        tigerPlayerMenu.setText("Tiger Played By");

        tigerPlayedByButtonGroup.add(tigerByMouseMenuItem);
        tigerByMouseMenuItem.setSelected(true);
        tigerByMouseMenuItem.setText("Mouse");
        tigerByMouseMenuItem.addActionListener(formListener);
        tigerPlayerMenu.add(tigerByMouseMenuItem);

        tigerPlayedByButtonGroup.add(tigerByAutoMenuItem);
        tigerByAutoMenuItem.setText("Auto");
        tigerByAutoMenuItem.addActionListener(formListener);
        tigerPlayerMenu.add(tigerByAutoMenuItem);

        settingsMenu.add(tigerPlayerMenu);

        goatPlayerMenu.setText("Goat Played By");

        goatPlayedByButtonGroup.add(goatByMouseMenuItem);
        goatByMouseMenuItem.setSelected(true);
        goatByMouseMenuItem.setText("Mouse");
        goatByMouseMenuItem.addActionListener(formListener);
        goatPlayerMenu.add(goatByMouseMenuItem);

        goatPlayedByButtonGroup.add(goatByAutoMenuItem);
        goatByAutoMenuItem.setText("Auto");
        goatByAutoMenuItem.addActionListener(formListener);
        goatPlayerMenu.add(goatByAutoMenuItem);

        settingsMenu.add(goatPlayerMenu);

        boardSizeMenu.setText("Board Size");

        boardSizeButtonGroup.add(normalBoardRadioButtonMenuItem);
        normalBoardRadioButtonMenuItem.setSelected(true);
        normalBoardRadioButtonMenuItem.setText("Normal");
        normalBoardRadioButtonMenuItem.addActionListener(formListener);
        boardSizeMenu.add(normalBoardRadioButtonMenuItem);

        boardSizeButtonGroup.add(bigBoardRadioButtonMenuItem);
        bigBoardRadioButtonMenuItem.setText("Big");
        bigBoardRadioButtonMenuItem.addActionListener(formListener);
        boardSizeMenu.add(bigBoardRadioButtonMenuItem);

        settingsMenu.add(boardSizeMenu);
        settingsMenu.add(jSeparator4);

        changePlayerNamesMenuItem.setText("Change Player Names");
        changePlayerNamesMenuItem.addActionListener(formListener);
        settingsMenu.add(changePlayerNamesMenuItem);

        gameMenuBar.add(settingsMenu);

        helpMenu.setText("Help");

        helpMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        helpMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/help.png"))); // NOI18N
        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(formListener);
        helpMenu.add(helpMenuItem);

        showHintMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        showHintMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/hint_bulb.png"))); // NOI18N
        showHintMenuItem.setText("Show Hint");
        showHintMenuItem.setEnabled(false);
        showHintMenuItem.addActionListener(formListener);
        helpMenu.add(showHintMenuItem);
        helpMenu.add(jSeparator8);

        aboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/information.png"))); // NOI18N
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(formListener);
        helpMenu.add(aboutMenuItem);

        gameMenuBar.add(helpMenu);

        setJMenuBar(gameMenuBar);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, javax.swing.event.ChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == newGameButton) {
                GameFrame.this.newGameButtonActionPerformed(evt);
            }
            else if (evt.getSource() == loadGameButton) {
                GameFrame.this.loadGameButtonActionPerformed(evt);
            }
            else if (evt.getSource() == saveGameButton) {
                GameFrame.this.saveGameButtonActionPerformed(evt);
            }
            else if (evt.getSource() == endGameButton) {
                GameFrame.this.endGameButtonActionPerformed(evt);
            }
            else if (evt.getSource() == undoButton) {
                GameFrame.this.undoButtonActionPerformed(evt);
            }
            else if (evt.getSource() == redoButton) {
                GameFrame.this.redoButtonActionPerformed(evt);
            }
            else if (evt.getSource() == hintButton) {
                GameFrame.this.hintButtonActionPerformed(evt);
            }
            else if (evt.getSource() == newGameMenuItem) {
                GameFrame.this.newGameMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == loadGameMenuItem) {
                GameFrame.this.loadGameMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == saveGameMenuItem) {
                GameFrame.this.saveGameMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == endGameMenuItem) {
                GameFrame.this.endGameMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuItem1) {
                GameFrame.this.jMenuItem1ActionPerformed(evt);
            }
            else if (evt.getSource() == exitMenuItem) {
                GameFrame.this.exitMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == undoMenuItem) {
                GameFrame.this.undoMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == redoMenuItem) {
                GameFrame.this.redoMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == preferenceMenuItem) {
                GameFrame.this.preferenceMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == showToolbarCheckBoxMenuItem) {
                GameFrame.this.showToolbarCheckBoxMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == lowDifficultyRadioMenuItem) {
                GameFrame.this.lowDifficultyRadioMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == moderateDifficultyRadioMenuItem) {
                GameFrame.this.moderateDifficultyRadioMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == highDifficultyRadioMenuItem) {
                GameFrame.this.highDifficultyRadioMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == autoSelectStartPlayerRbMenuItem) {
                GameFrame.this.autoSelectStartPlayerRbMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == startByTigerMenuItem) {
                GameFrame.this.startByTigerMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == startByGoatMenuItem) {
                GameFrame.this.startByGoatMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == tigerByMouseMenuItem) {
                GameFrame.this.tigerByMouseMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == tigerByAutoMenuItem) {
                GameFrame.this.tigerByAutoMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == goatByMouseMenuItem) {
                GameFrame.this.goatByMouseMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == goatByAutoMenuItem) {
                GameFrame.this.goatByAutoMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == normalBoardRadioButtonMenuItem) {
                GameFrame.this.normalBoardRadioButtonMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == bigBoardRadioButtonMenuItem) {
                GameFrame.this.bigBoardRadioButtonMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == changePlayerNamesMenuItem) {
                GameFrame.this.changePlayerNamesMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == helpMenuItem) {
                GameFrame.this.helpMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == showHintMenuItem) {
                GameFrame.this.showHintMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == aboutMenuItem) {
                GameFrame.this.aboutMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == gameMenu) {
                GameFrame.this.gameMenuActionPerformed(evt);
            }
            else if (evt.getSource() == evaluteCurrentGameButton) {
                GameFrame.this.evaluteCurrentGameButtonActionPerformed(evt);
            }
        }

        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            if (evt.getSource() == boardSizeSlider) {
                GameFrame.this.boardSizeSliderStateChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameButtonActionPerformed
        startNewGame();
    }//GEN-LAST:event_newGameButtonActionPerformed

	private void newGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameMenuItemActionPerformed
        startNewGame();
    }//GEN-LAST:event_newGameMenuItemActionPerformed

    private void loadGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadGameMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loadGameMenuItemActionPerformed

    private void saveGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGameMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveGameMenuItemActionPerformed

    private void endGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endGameMenuItemActionPerformed
        exitCurrentGame();
    }//GEN-LAST:event_endGameMenuItemActionPerformed

	private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void undoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMenuItemActionPerformed
        //gamePlayManager.undoLastMove();
    	if(MoveUndoManager.getInstance().canUndo()){
    		MoveUndoManager.getInstance().undo();
    	}
    	undoMenuItem.setEnabled(MoveUndoManager.getInstance().canUndo());
    	undoButton.setEnabled(MoveUndoManager.getInstance().canUndo());
    	
    	redoMenuItem.setEnabled(MoveUndoManager.getInstance().canRedo());
    	redoButton.setEnabled(MoveUndoManager.getInstance().canRedo());
    	
    }//GEN-LAST:event_undoMenuItemActionPerformed

    private void redoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoMenuItemActionPerformed
    	//gamePlayManager.redoLastMove();
    	if(MoveUndoManager.getInstance().canRedo()){
    		MoveUndoManager.getInstance().redo();
    	}
    	undoMenuItem.setEnabled(MoveUndoManager.getInstance().canUndo());
    	undoButton.setEnabled(MoveUndoManager.getInstance().canUndo());
    	
    	redoMenuItem.setEnabled(MoveUndoManager.getInstance().canRedo());
    	redoButton.setEnabled(MoveUndoManager.getInstance().canRedo());
    }//GEN-LAST:event_redoMenuItemActionPerformed

    private void showToolbarCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showToolbarCheckBoxMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showToolbarCheckBoxMenuItemActionPerformed

    private void startByTigerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startByTigerMenuItemActionPerformed
        gameEngine.setFirstPlayer(GameEngine.MANUAL_TIGER_PLAYER);
        gameEngine.setSecondPlayer(GameEngine.MANUAL_GOAT_PLAYER);
    }//GEN-LAST:event_startByTigerMenuItemActionPerformed

    private void startByGoatMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startByGoatMenuItemActionPerformed
        gameEngine.setFirstPlayer(GameEngine.MANUAL_GOAT_PLAYER);
        gameEngine.setSecondPlayer(GameEngine.MANUAL_TIGER_PLAYER);
    }//GEN-LAST:event_startByGoatMenuItemActionPerformed

    private void tigerByMouseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tigerByMouseMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tigerByMouseMenuItemActionPerformed

    private void tigerByAutoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tigerByAutoMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tigerByAutoMenuItemActionPerformed

    private void goatByMouseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goatByMouseMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_goatByMouseMenuItemActionPerformed

    private void goatByAutoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goatByAutoMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_goatByAutoMenuItemActionPerformed

    private void changePlayerNamesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePlayerNamesMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_changePlayerNamesMenuItemActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_helpMenuItemActionPerformed

    private void showHintMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showHintMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showHintMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void hintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hintButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hintButtonActionPerformed

    private void loadGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadGameButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loadGameButtonActionPerformed

    private void saveGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGameButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveGameButtonActionPerformed

    private void endGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endGameButtonActionPerformed
    	exitCurrentGame();
    }//GEN-LAST:event_endGameButtonActionPerformed

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
    	//gamePlayManager.undoLastMove();
    	if(MoveUndoManager.getInstance().canUndo()){
    		MoveUndoManager.getInstance().undo();
    	}
    	undoMenuItem.setEnabled(MoveUndoManager.getInstance().canUndo());
    	undoButton.setEnabled(MoveUndoManager.getInstance().canUndo());
    	
    	redoMenuItem.setEnabled(MoveUndoManager.getInstance().canRedo());
    	redoButton.setEnabled(MoveUndoManager.getInstance().canRedo());
    }//GEN-LAST:event_undoButtonActionPerformed

    private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoButtonActionPerformed
    	//gamePlayManager.redoLastMove();
    	if(MoveUndoManager.getInstance().canRedo()){
    		MoveUndoManager.getInstance().redo();
    	}
    	undoMenuItem.setEnabled(MoveUndoManager.getInstance().canUndo());
    	undoButton.setEnabled(MoveUndoManager.getInstance().canUndo());
    	
    	redoMenuItem.setEnabled(MoveUndoManager.getInstance().canRedo());
    	redoButton.setEnabled(MoveUndoManager.getInstance().canRedo());
    }//GEN-LAST:event_redoButtonActionPerformed

    private void autoSelectStartPlayerRbMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoSelectStartPlayerRbMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_autoSelectStartPlayerRbMenuItemActionPerformed

    private void normalBoardRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalBoardRadioButtonMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_normalBoardRadioButtonMenuItemActionPerformed

    private void bigBoardRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bigBoardRadioButtonMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bigBoardRadioButtonMenuItemActionPerformed

    private void preferenceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferenceMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_preferenceMenuItemActionPerformed

    private void boardSizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_boardSizeSliderStateChanged
        int val = boardSizeSlider.getValue();
        UIBoard.sizeFactorEnum = SizeFactorEnum.getValue(val);
        selectedBoardSizeLabel.setText("" + UIBoard.sizeFactorEnum.toString());
        if(null != boardBasePanel){
        	boardBasePanel.getGameBoard().updateBoxDetails();
        	boardBasePanel.updateSize();
        	boardBasePanel.repaint();
            boardBasePanel.updateUI();
        }
    }//GEN-LAST:event_boardSizeSliderStateChanged

    private void lowDifficultyRadioMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowDifficultyRadioMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lowDifficultyRadioMenuItemActionPerformed

    private void moderateDifficultyRadioMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moderateDifficultyRadioMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moderateDifficultyRadioMenuItemActionPerformed

    private void highDifficultyRadioMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highDifficultyRadioMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_highDifficultyRadioMenuItemActionPerformed

    private void gameMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gameMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gameMenuActionPerformed

    private void evaluteCurrentGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluteCurrentGameButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_evaluteCurrentGameButtonActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JRadioButtonMenuItem autoSelectStartPlayerRbMenuItem;
    private javax.swing.JRadioButtonMenuItem bigBoardRadioButtonMenuItem;
    private javax.swing.JLabel blockedTigerCountLabel;
    private javax.swing.JPanel boardContainerPanel;
    private javax.swing.ButtonGroup boardSizeButtonGroup;
    private javax.swing.JMenu boardSizeMenu;
    private javax.swing.JSlider boardSizeSlider;
    private javax.swing.JMenuItem changePlayerNamesMenuItem;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JLabel currentPlayerLabel;
    private javax.swing.JMenu difficultyMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JButton endGameButton;
    private javax.swing.JMenuItem endGameMenuItem;
    private javax.swing.JButton evaluteCurrentGameButton;
    private javax.swing.JMenuItem evaluteCurrentGameMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JToolBar gameControlToolBar;
    private javax.swing.ButtonGroup gameDifficultyButtonGroup;
    private javax.swing.JMenu gameMenu;
    private javax.swing.JMenuBar gameMenuBar;
    private javax.swing.JRadioButtonMenuItem goatByAutoMenuItem;
    private javax.swing.JRadioButtonMenuItem goatByMouseMenuItem;
    private javax.swing.ButtonGroup goatPlayedByButtonGroup;
    private javax.swing.JMenu goatPlayerMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JRadioButtonMenuItem highDifficultyRadioMenuItem;
    private javax.swing.JButton hintButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JPopupMenu.Separator jSeparator11;
    private javax.swing.JToolBar.Separator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JPopupMenu.Separator jSeparator14;
    private javax.swing.JToolBar.Separator jSeparator15;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private javax.swing.JLabel killedGoatsCountLabel;
    private javax.swing.JButton loadGameButton;
    private javax.swing.JMenuItem loadGameMenuItem;
    private javax.swing.JRadioButtonMenuItem lowDifficultyRadioMenuItem;
    private javax.swing.JRadioButtonMenuItem moderateDifficultyRadioMenuItem;
    private javax.swing.JTextArea movementTextArea;
    private javax.swing.JButton newGameButton;
    private javax.swing.JMenuItem newGameMenuItem;
    private javax.swing.JRadioButtonMenuItem normalBoardRadioButtonMenuItem;
    private javax.swing.JPanel playerInfoPanel;
    private javax.swing.JMenuItem preferenceMenuItem;
    private javax.swing.JButton redoButton;
    private javax.swing.JMenuItem redoMenuItem;
    private javax.swing.JButton saveGameButton;
    private javax.swing.JMenuItem saveGameMenuItem;
    private javax.swing.JLabel selectedBoardSizeLabel;
    private javax.swing.JMenu settingsMenu;
    private javax.swing.JMenuItem showHintMenuItem;
    private javax.swing.JCheckBoxMenuItem showToolbarCheckBoxMenuItem;
    private javax.swing.JRadioButtonMenuItem startByGoatMenuItem;
    private javax.swing.JRadioButtonMenuItem startByTigerMenuItem;
    private javax.swing.ButtonGroup startingAnimalButtonGroup;
    private javax.swing.JMenu startingAnimalMenu;
    private javax.swing.JPanel statisticPanel;
    private javax.swing.JRadioButtonMenuItem tigerByAutoMenuItem;
    private javax.swing.JRadioButtonMenuItem tigerByMouseMenuItem;
    private javax.swing.ButtonGroup tigerPlayedByButtonGroup;
    private javax.swing.JMenu tigerPlayerMenu;
    private javax.swing.JButton undoButton;
    private javax.swing.JMenuItem undoMenuItem;
    // End of variables declaration//GEN-END:variables
    
    
    
    public void propertyChange(java.beans.PropertyChangeEvent evt) {
    	System.out.println(evt.getPropertyName());
    	
    };
    
    /* (non-Javadoc)
	 * @see net.sf.bagh.bandhi.app.GameStatusChangeListener#gameStarted(net.sf.bagh.bandhi.app.GameStatusChangeEvent)
	 */
	@Override
	public void gameStarted(GameStatusChangeEvent event) {
		if(GameStatusEnum.NEW_GAME.equals(event.getGameStatus())){
			startingAnimalMenu.setEnabled(false);
			tigerPlayerMenu.setEnabled(false);
			goatPlayerMenu.setEnabled(false);
			showHintMenuItem.setEnabled(true);
			saveGameButton.setEnabled(true);
			saveGameMenuItem.setEnabled(true);
			endGameButton.setEnabled(true);
			endGameMenuItem.setEnabled(true);
			hintButton.setEnabled(true);
			boardSizeSlider.setEnabled(true);
		}
	}


	/* (non-Javadoc)
	 * @see net.sf.bagh.bandhi.app.GameStatusChangeListener#gamePaused(net.sf.bagh.bandhi.app.GameStatusChangeEvent)
	 */
	@Override
	public void gamePaused(GameStatusChangeEvent event) {
		// TODO Auto-generated method stub
		
	}

	/* (non-Javadoc)
	 * @see net.sf.bagh.bandhi.app.GameStatusChangeListener#gameExited(net.sf.bagh.bandhi.app.GameStatusChangeEvent)
	 */
	@Override
	public void gameExited(GameStatusChangeEvent event) {
		if(GameStatusEnum.EXITED.equals(event.getGameStatus())){
			gamePlayManager.removeGame();
			if(null != boardContainerPanel.getComponents()
					&& boardContainerPanel.getComponents().length > 0)
				boardContainerPanel.removeAll();
			boardContainerPanel.updateUI();
			startingAnimalMenu.setEnabled(true);
			tigerPlayerMenu.setEnabled(true);
			goatPlayerMenu.setEnabled(true);
			showHintMenuItem.setEnabled(true);
			saveGameButton.setEnabled(false);
			saveGameMenuItem.setEnabled(false);
			endGameMenuItem.setEnabled(false);
			endGameButton.setEnabled(false);
			hintButton.setEnabled(false);
			boardSizeSlider.setEnabled(false);
			undoButton.setEnabled(false);
			undoMenuItem.setEnabled(false);
			redoButton.setEnabled(false);
			redoMenuItem.setEnabled(false);
		}
	}

	/* (non-Javadoc)
	 * @see net.sf.bagh.bandhi.app.GameStatusChangeListener#gameEnded(net.sf.bagh.bandhi.app.GameStatusChangeEvent)
	 */
	@Override
	public void gameEnded(GameStatusChangeEvent event) {
		if(GameStatusEnum.ENDED.equals(event.getGameStatus())){
			AnimalType winer = (AnimalType) event.getNewValue();
			JOptionPane.showMessageDialog(this, "Winer is : " + winer);
			gamePlayManager.removeGame();
			if(null != boardContainerPanel.getComponents()
					&& boardContainerPanel.getComponents().length > 0)
				boardContainerPanel.removeAll();
			boardContainerPanel.updateUI();
			startingAnimalMenu.setEnabled(true);
			tigerPlayerMenu.setEnabled(true);
			goatPlayerMenu.setEnabled(true);
			showHintMenuItem.setEnabled(true);
			saveGameButton.setEnabled(false);
			saveGameMenuItem.setEnabled(false);
			endGameMenuItem.setEnabled(false);
			endGameButton.setEnabled(false);
			hintButton.setEnabled(false);
			boardSizeSlider.setEnabled(false);
			undoButton.setEnabled(false);
			undoMenuItem.setEnabled(false);
			redoButton.setEnabled(false);
			redoMenuItem.setEnabled(false);
		}
	}

	/* (non-Javadoc)
	 * @see net.sf.bagh.bandhi.app.GameStatusChangeListener#gameSaved(net.sf.bagh.bandhi.app.GameStatusChangeEvent)
	 */
	@Override
	public void gameSaved(GameStatusChangeEvent event) {
		// TODO Auto-generated method stub
		
	}

	/* (non-Javadoc)
	 * @see net.sf.bagh.bandhi.app.GameStatusChangeListener#gameLoaded(net.sf.bagh.bandhi.app.GameStatusChangeEvent)
	 */
	@Override
	public void gameLoaded(GameStatusChangeEvent event) {
		// TODO Auto-generated method stub
		
	}

	/* (non-Javadoc)
	 * @see net.sf.bagh.bandhi.app.GameStatusChangeListener#animalCaptured(net.sf.bagh.bandhi.app.GameStatusChangeEvent)
	 */
	@Override
	public void animalCaptured(GameStatusChangeEvent event) {
		// TODO Auto-generated method stub
		
	}

	/* (non-Javadoc)
     * @see net.sf.bagh.bandhi.app.GameStatusChangeListener#animalMoved(net.sf.bagh.bandhi.app.GameStatusChangeEvent)
     */
    @Override
    public void animalMoved(GameStatusChangeEvent gameStatusChangeEvent) {
    	if(null != gameStatusChangeEvent){
    		GameStatusEnum status = gameStatusChangeEvent.getGameStatus();
    		if(GameStatusEnum.ANIMAL_MOVED.isEqual(status)){
    			if(null != gameStatusChangeEvent.getOldValue() 
    					&& gameStatusChangeEvent.getOldValue() instanceof PathOfMove){
    				 PathOfMove lastMove = (PathOfMove) gameStatusChangeEvent.getOldValue();
    				 gamePlayManager.addUndoablemove(lastMove);
    				 if(gamePlayManager.canUndo()){
    					 undoButton.setEnabled(true);
    					 undoMenuItem.setEnabled(true);
    				 } else {
    					 undoButton.setEnabled(false);
    					 undoMenuItem.setEnabled(false);
    				 }
    				 if(gamePlayManager.canRedo()){
    					 redoButton.setEnabled(true);
    					 redoMenuItem.setEnabled(true);
    				 } else {
    					 redoButton.setEnabled(false);
    					 redoMenuItem.setEnabled(false);
    				 }
    				 if(null != lastMove.getCapturedAnimal()){
    					 int count = gameBoard.getCapturedGoats().size();
    					 killedGoatsCountLabel.setText(""+count);
    				 }
    				 Animal animal = lastMove.getAnimal();
    				 if(null != animal && animal instanceof Tiger){
    					 movementTextArea.append("Tiger moved from " + lastMove.getMovedFromBox()
    							 + " to " + lastMove.getCurrentBox()+"\n");
    				 } else if(null != animal && animal instanceof Goat){
    					 movementTextArea.append("Goat moved from " + lastMove.getMovedFromBox()
    							 + " to " + lastMove.getCurrentBox()+"\n");
    				 }
    			}
    			if(AnimalType.TIGER == gameEngine.getCurrentPlayer().getAnimalType()){
    				currentPlayerLabel.setIcon(TigerImageEnum.LARGE.getImage());
    				currentPlayerLabel.setText(gameEngine.getCurrentPlayer().getName());
    			} else if(AnimalType.GOAT == gameEngine.getCurrentPlayer().getAnimalType()){
    				currentPlayerLabel.setIcon(GoatImageEnum.LARGE.getImage());
    				currentPlayerLabel.setText(gameEngine.getCurrentPlayer().getName());
    			}
    			currentPlayerLabel.updateUI();
    		} 
    		if(GameStatusEnum.ANIMAL_CAPTURED.isEqual(status)){
    			
    		}
    	}
    	
    }
    
    /* (non-Javadoc)
	 * @see net.sf.bagh.bandhi.app.event.RedoMoveEventListener#redoComplete(net.sf.bagh.bandhi.app.event.RedoMoveEvent)
	 */
	@Override
	public void redoComplete(RedoMoveEvent event) {
		if(null != boardBasePanel &&  null != event && null != event.getData()){
			boardBasePanel.reDraw(event.getData());
			boardBasePanel.updateUI();
		}
		gameEngine.shiftNextPlayer();
		if(AnimalType.TIGER == gameEngine.getCurrentPlayer().getAnimalType()){
			currentPlayerLabel.setIcon(TigerImageEnum.LARGE.getImage());
			currentPlayerLabel.setText(gameEngine.getCurrentPlayer().getName());
		} else if(AnimalType.GOAT == gameEngine.getCurrentPlayer().getAnimalType()){
			currentPlayerLabel.setIcon(GoatImageEnum.LARGE.getImage());
			currentPlayerLabel.setText(gameEngine.getCurrentPlayer().getName());
		}
		currentPlayerLabel.updateUI();
		killedGoatsCountLabel.setText(""+gameBoard.getCapturedGoats().size());
		undoMenuItem.setEnabled(MoveUndoManager.getInstance().canUndo());
    	undoButton.setEnabled(MoveUndoManager.getInstance().canUndo());
    	redoMenuItem.setEnabled(MoveUndoManager.getInstance().canRedo());
    	redoButton.setEnabled(MoveUndoManager.getInstance().canRedo());
	}

	/* (non-Javadoc)
	 * @see net.sf.bagh.bandhi.app.event.UndoMoveEventListener#undoComplete(net.sf.bagh.bandhi.app.event.UndoMoveEvent)
	 */
	@Override
	public void undoComplete(UndoMoveEvent event) {
		if(null != boardBasePanel &&  null != event && null != event.getData()){
			boardBasePanel.reDraw(event.getData());
			boardBasePanel.updateUI();
		}
		gameEngine.shiftNextPlayer();
		if(AnimalType.TIGER == gameEngine.getCurrentPlayer().getAnimalType()){
			currentPlayerLabel.setIcon(TigerImageEnum.LARGE.getImage());
			currentPlayerLabel.setText(gameEngine.getCurrentPlayer().getName());
		} else if(AnimalType.GOAT == gameEngine.getCurrentPlayer().getAnimalType()){
			currentPlayerLabel.setIcon(GoatImageEnum.LARGE.getImage());
			currentPlayerLabel.setText(gameEngine.getCurrentPlayer().getName());
		}
		currentPlayerLabel.updateUI();
		killedGoatsCountLabel.setText(""+gameBoard.getCapturedGoats().size());
		undoMenuItem.setEnabled(MoveUndoManager.getInstance().canUndo());
    	undoButton.setEnabled(MoveUndoManager.getInstance().canUndo());
    	redoMenuItem.setEnabled(MoveUndoManager.getInstance().canRedo());
    	redoButton.setEnabled(MoveUndoManager.getInstance().canRedo());
	}

	

	@Override
	public void undoableMoveHappened(UndoableMoveEvent event) {
		
	}

	@Override
	public void undoableEditHappened(UndoableEditEvent e) {
		/*if(null != e && null != e.getEdit()){
			if(e.getEdit().canUndo()){
				undoButton.setEnabled(true);
				undoMenuItem.setEnabled(true);
			} else {
				undoButton.setEnabled(false);
				undoMenuItem.setEnabled(false);
			}
			
			if(e.getEdit().canRedo()){
				redoButton.setEnabled(true);
				redoMenuItem.setEnabled(true);
			} else {
				redoButton.setEnabled(false);
				redoMenuItem.setEnabled(false);
			}
			
			MoveUndoManager.getInstance().addEdit(e.getEdit());
		}*/
	}

	/**
	 * Start a new Game
	 */
	public void startNewGame() {
		logger.info("Starting new Game");
		boolean replaceOldGame = false;
		if(gamePlayManager.isGameInPlay()){
			logger.info("A game is already in play...");
			int option = JOptionPane.showConfirmDialog(this, "A game is already in play...\n" +
					"Do you want to continue?");
			if(JOptionPane.OK_OPTION == option){
				replaceOldGame = true;
			} else {
				return;
			}
		}
		
		
		int val = boardSizeSlider.getValue();
		if(logger.isDebugEnabled()){
			logger.debug("Board Size: "+SizeFactorEnum.getValue(val));
		}
        UIBoard.sizeFactorEnum = SizeFactorEnum.getValue(val);
		if(startByTigerMenuItem.isSelected()){
			gameEngine.setFirstPlayer( GameEngine.MANUAL_TIGER_PLAYER);
			gameEngine.setSecondPlayer(GameEngine.MANUAL_GOAT_PLAYER);
		} else if(startByGoatMenuItem.isSelected()){
			gameEngine.setFirstPlayer( GameEngine.MANUAL_GOAT_PLAYER);
			gameEngine.setSecondPlayer(GameEngine.MANUAL_TIGER_PLAYER);
		} else if(autoSelectStartPlayerRbMenuItem.isSelected()){
			Random random = new Random(1234567890);
			int select = random.nextInt() % 2;
			if(select == 0){
				gameEngine.setFirstPlayer( GameEngine.MANUAL_TIGER_PLAYER);
				gameEngine.setSecondPlayer(GameEngine.MANUAL_GOAT_PLAYER);
			} else {
				gameEngine.setFirstPlayer( GameEngine.MANUAL_GOAT_PLAYER);
				gameEngine.setSecondPlayer(GameEngine.MANUAL_TIGER_PLAYER);
			}
		}
		
		if(logger.isDebugEnabled()){
			logger.debug("Starting player: " + gameEngine.getFirstPlayer().getAnimalType());
		}
		
		UITiger[] tigers = new UITiger[2];
		tigers[0] = new UITiger("T", 1);
		tigers[1] = new UITiger("T", 2);
		
		UIGoat[] goats = new UIGoat[20];
		for (int i = 0; i < goats.length; i++) {
			goats[i] = new UIGoat("G", i+1);
		}
		gameBoard = new UIBoard(tigers, goats);
		gameBoard.getUndoMoveSupport().addUndoableEditListener(this);
		gameEngine.setCurrentPlayer(gameEngine.getFirstPlayer());
		if(AnimalType.TIGER == gameEngine.getCurrentPlayer().getAnimalType()){
			currentPlayerLabel.setIcon(TigerImageEnum.LARGE.getImage());
		} else if(AnimalType.GOAT == gameEngine.getCurrentPlayer().getAnimalType()){
			currentPlayerLabel.setIcon(GoatImageEnum.LARGE.getImage());
		}
		
		Game game = new Game(DifficultyLevelEnum.LOW, gameBoard);
		gamePlayManager.startNewGame(game, replaceOldGame);
		if(null != boardContainerPanel.getComponents()
				&& boardContainerPanel.getComponents().length > 0)
			boardContainerPanel.removeAll();
		boardBasePanel = new BoardBasePanel();
		boardBasePanel.setGameBoard(gameBoard);
		boardContainerPanel.add(boardBasePanel, BorderLayout.CENTER);
        boardContainerPanel.updateUI();
        GameStatusChangeEvent event = new GameStatusChangeEvent(this, GameStatusEnum.NEW_GAME, null, game);
		GameStatusChangeEventManager.getInstance().fireGameStatusChangeEvent(event);
        
		/*ScrollablePanel panel = new ScrollablePanel(new FlowLayout(FlowLayout.CENTER));
        panel.setScrollableWidth( ScrollablePanel.ScrollableSizeHint.FIT );
        panel.setScrollableHeight( ScrollablePanel.ScrollableSizeHint.NONE );
        
        panel.add(boardBasePanel);
        
        panel.setBackground(new java.awt.Color(104, 141, 189));
        
        panel.setScrollableBlockIncrement(
            ScrollablePanel.HORIZONTAL, ScrollablePanel.IncrementType.PERCENT, 200);
        panel.setScrollableBlockIncrement(
            ScrollablePanel.VERTICAL, ScrollablePanel.IncrementType.PERCENT, 200);
        
        boardScrollPane.getViewport().setBackground(new java.awt.Color(104, 141, 189));
        boardScrollPane.setViewportView(panel);
		
        boardContainerPanel.add(boardScrollPane, BorderLayout.CENTER);
        boardContainerPanel.add(boardBasePanel, BorderLayout.CENTER);
        boardContainerPanel.updateUI();*/
        
		/*NewGameDialog gameDialog = new NewGameDialog(this, true);
		WindowUtil.bringCenterTo(gameDialog, this);
		WindowOptions option = gameDialog.showDialog();
		if(WindowOptions.OK == option){
			
			
			
			if(null != boardContainerPanel.getComponents()
					&& boardContainerPanel.getComponents().length > 0)
				boardContainerPanel.removeAll();
			
			boardBasePanel = new BoardBasePanel();
			
			
			boardBasePanel.setGameBoard(gameBoard);
			
	        boardContainerPanel.add(boardBasePanel, BorderLayout.CENTER);
	        boardContainerPanel.updateUI();
		}*/
	}
	
	/**
	 * 
	 */
	public void exitCurrentGame() {
		if(gamePlayManager.isGameInPlay()){
			GameStatusChangeEvent event = new GameStatusChangeEvent(this, GameStatusEnum.EXITED, null, null);
			GameStatusChangeEventManager.getInstance().fireGameStatusChangeEvent(event);
		}
	}
}
